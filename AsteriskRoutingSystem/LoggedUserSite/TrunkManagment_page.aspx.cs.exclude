using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using AsteriskRoutingSystem;
using System.Security.Cryptography;
using System.IO;
using System.Text;

public partial class LoggedUserSite_TrunkManagment_page : System.Web.UI.Page
{
    public bool isUpdate
    {
        get { return ViewState["bool"] == null ? false : (bool)ViewState["bool"]; }
        set { ViewState["bool"] = value; }
    }

    public string str_login
    {
        get
        {
            string text = (string)ViewState["str_login"];
            if (text != null)
                return text;
            else
                return string.Empty;
        }
        set
        {
            ViewState["str_login"] = value;
        }
    }

    public string str_password
    {
        get
        {
            string text = (string)ViewState["str_password"];
            if (text != null)
                return text;
            else
                return string.Empty;
        }
        set
        {
            ViewState["str_password"] = value;
        }
    }

    protected void Page_Load(object sender, EventArgs e)
    {       
        if (!IsPostBack)
        {
            Label1.Text = Membership.GetUser().UserName.ToString();           
           
        }
    }

    protected void OnAsteriskSelectedIndexChanged(object sender, EventArgs e)
    {   
        GridView_trunks.DataBind();
        isUpdate = false;
        Button_confirmTrunk.Enabled = true;
    }

    protected void OnTrunkSelectedIndexChanged(object sender, EventArgs e)
    {
        isUpdate = true;
        Button_cancelEditTrunk.Visible = true;
        Button_deleteTrunk.Visible = true;
        Label_manageTrunks.Text = "Upraviť Trunk";
        Button_confirmTrunk.Text = "Upraviť";
        GridViewRow row = GridView_trunks.SelectedRow;
        TextBox_trunkName.Text = row.Cells[1].Text;
        TextBox_hostIP.Text = row.Cells[2].Text;
        TextBox_context.Text = row.Cells[3].Text;       
    }

    protected void Button_confirmTrunk_Click(object sender, EventArgs e)
    {        
        if (Page.IsValid)
        {
            TCPConnector tcp = new TCPConnector(GridView_listOfAsterisk.SelectedRow.Cells[2].Text);
            if (tcp.connect())
            {
                GridView_listOfAsterisk.Columns[4].Visible = true;
                GridView_listOfAsterisk.Columns[5].Visible = true;
                GridView_listOfAsterisk.DataBind();
                str_login = GridView_listOfAsterisk.SelectedRow.Cells[4].Text;
                str_password = GridView_listOfAsterisk.SelectedRow.Cells[5].Text;
                GridView_listOfAsterisk.Columns[4].Visible = false;
                GridView_listOfAsterisk.Columns[5].Visible = false;

                if (tcp.login(str_login, DecryptAMIPassword(str_password)))
                {
                    
                    Trunks trunk = new Trunks();
                    trunk.trunk_name = TextBox_trunkName.Text;
                    trunk.host_ip = TextBox_hostIP.Text;
                    trunk.context_name = TextBox_context.Text;                   
                    GridView_listOfAsterisk.Columns[3].Visible = true;
                    GridView_listOfAsterisk.DataBind();
                    trunk.id_Asterisk = int.Parse(GridView_listOfAsterisk.SelectedRow.Cells[3].Text);
                    GridView_listOfAsterisk.Columns[3].Visible = false;
                    TrunksAccessLayer trunkAccessLayer = new TrunksAccessLayer();
                    if (!isUpdate)
                    {
                        if (!trunkAccessLayer.insertUniqueTrunkByAsterisk(trunk) && tcp.addTrunk(TextBox_trunkName.Text, TextBox_hostIP.Text, TextBox_context.Text))
                        {
                            Label_result.Text = "Pridanie prebehlo úspešne.";
                            GridView_trunks.DataBind();
                            tcp.logout();
                            tcp.disconnect();
                        }
                        else
                        {
                            Label_result.Text = "trunk uz existuje.";
                            tcp.logout();
                            tcp.disconnect();
                        }
                    }                   
                    else if (isUpdate)
                    {
                        trunk.id_trunk = int.Parse(GridView_trunks.DataKeys[GridView_trunks.SelectedIndex]["id_trunk"].ToString());
                        if (!trunkAccessLayer.updateTrunk(trunk) && tcp.updateTrunk(GridView_trunks.SelectedRow.Cells[1].Text, TextBox_trunkName.Text,
                            TextBox_hostIP.Text, TextBox_context.Text))
                        {
                            Label_result.Text = "Update prebehol úspešne.";
                            GridView_trunks.DataBind();
                        }
                        else
                        {
                            Label_result.Text = "Trunk uz existuje.";
                        }
                    }
                }
                else
                {                   
                    Label_result.Text = "pripojenie k AMI zlyhalo!";
                }
                tcp.disconnect();
               
            }
            else
            {
                Label_result.Text = "pripojenie na socket zlyhalo!";
            }
        }
    }

    protected void Button_cancelEditTrunk_Click(object sender, EventArgs e)
    {
        isUpdate = false;
        GridView_trunks.SelectedIndex = -1;
        Button_cancelEditTrunk.Visible = false;
        Button_deleteTrunk.Visible = false;
        Label_manageTrunks.Text = "Pridať Trunk";
        Button_confirmTrunk.Text = "Pridať";
        GridViewRow row = GridView_listOfAsterisk.SelectedRow;
        TextBox_trunkName.Text = "";
        TextBox_hostIP.Text = "";
        TextBox_context.Text = "";
    }

    protected void Button_deleteTrunk_Click(object sender, EventArgs e)
    {
        TCPConnector tcp = new TCPConnector(GridView_listOfAsterisk.SelectedRow.Cells[2].Text);
        if (tcp.connect())
        {
            GridView_listOfAsterisk.Columns[4].Visible = true;
            GridView_listOfAsterisk.Columns[5].Visible = true;
            GridView_listOfAsterisk.DataBind();
            str_login = GridView_listOfAsterisk.SelectedRow.Cells[4].Text;
            str_password = GridView_listOfAsterisk.SelectedRow.Cells[5].Text;
            GridView_listOfAsterisk.Columns[4].Visible = false;
            GridView_listOfAsterisk.Columns[5].Visible = false;
            if(tcp.login(str_login, DecryptAMIPassword(str_password)))
            {
                if (tcp.deleteTrunk(GridView_trunks.SelectedRow.Cells[1].Text))
                {
                    TrunksAccessLayer trunkAccessLayer = new TrunksAccessLayer();
                    trunkAccessLayer.deleteTrunk(int.Parse(GridView_trunks.DataKeys[GridView_trunks.SelectedIndex]["id_trunk"].ToString()));
                    GridView_trunks.DataBind();
                    Label_result.Text = "Vymazane";
                    tcp.logout();
                    tcp.disconnect();
                }
                else
                {
                    tcp.logout();
                    tcp.disconnect();
                    Label_result.Text = "Vymazanie zlyhalo!";
                }
            }
            else
            {               
                tcp.disconnect();
                Label_result.Text = "pripojenie k AMI zlyhalo!";
            }
        }
        else
        {
            Label_result.Text = "pripojenie na socket zlyhalo!";
        }
    }

    private string DecryptAMIPassword(string cipherText)
    {
        string EncryptionKey = "MAKV2SPBNI99212";
        byte[] cipherBytes = Convert.FromBase64String(cipherText);
        using (Aes encryptor = Aes.Create())
        {
            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });
            encryptor.Key = pdb.GetBytes(32);
            encryptor.IV = pdb.GetBytes(16);
            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(cipherBytes, 0, cipherBytes.Length);
                    cs.Close();
                }
                cipherText = Encoding.Unicode.GetString(ms.ToArray());
            }
        }
        return cipherText;
    }
}